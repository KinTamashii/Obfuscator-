#pragma once
#include <google.hpp>
#include <map>
#include <util/file.hpp>
#include <wx/filefn.h> 
extern class preferences {
    std::map<std::string, int> keys {
        {"afrikaans",0},
        {"albanian",1},
        {"amharic",2},
        {"arabic",3},
        {"armenian",4},
        {"assamese",5},
        {"aymara",6},
        {"azerbaijani",7},
        {"bambara",8},
        {"basque",9},
        {"belarusian",10},
        {"bengali",11},
        {"bhojpuri",12},
        {"bosnian",13},
        {"bulgarian",14},
        {"catalan",15},
        {"cebuano",16},
        {"chichewa",17},
        {"chinesesimplified",18},
        {"chinesetraditional",19},
        {"corsican",20},
        {"croatian",21},
        {"czech",22},
        {"danish",23},
        {"dhivehi",24},
        {"dogri",25},
        {"dutch",26},
        {"english",27},
        {"esperanto",28},
        {"estonian",29},
        {"ewe",30},
        {"filipino",31},
        {"finnish",32},
        {"french",33},
        {"frisian",34},
        {"galician",35},
        {"georgian",36},
        {"german",37},
        {"greek",38},
        {"guarani",39},
        {"gujarati",40},
        {"haitiancreole",41},
        {"hausa",42},
        {"hawaiian",43},
        {"hebrew",44},
        {"hindi",45},
        {"hmong",46},
        {"hungarian",47},
        {"icelandic",48},
        {"igbo",49},
        {"ilocano",50},
        {"indonesian",51},
        {"irish",52},
        {"italian",53},
        {"japanese",54},
        {"javanese",55},
        {"kannada",56},
        {"kazakh",57},
        {"khmer",58},
        {"kinyarwanda",59},
        {"konkani",60},
        {"korean",61},
        {"krio",62},
        {"kurdishkurmanji",63},
        {"kurdishsorani",64},
        {"kyrgyz",65},
        {"lao",66},
        {"latin",67},
        {"latvian",68},
        {"lingala",69},
        {"lithuanian",70},
        {"luganda",71},
        {"luxembourgish",72},
        {"macedonian",73},
        {"maithili",74},
        {"malagasy",75},
        {"malay",76},
        {"malayalam",77},
        {"maltese",78},
        {"maori",79},
        {"marathi",80},
        {"meiteilonmanipuri",81},
        {"mizo",82},
        {"mongolian",83},
        {"myanmarburmese",84},
        {"nepali",85},
        {"norwegian",86},
        {"odiaoriya",87},
        {"oromo",88},
        {"pashto",89},
        {"persian",90},
        {"polish",91},
        {"portuguese",92},
        {"punjabi",93},
        {"quechua",94},
        {"romanian",95},
        {"russian",96},
        {"samoan",97},
        {"sanskrit",98},
        {"scotsgaelic",99},
        {"sepedi",100},
        {"serbian",101},
        {"sesotho",102},
        {"shona",103},
        {"sindhi",104},
        {"sinhala",105},
        {"slovak",106},
        {"slovenian",107},
        {"somali",108},
        {"spanish",109},
        {"sundanese",110},
        {"swahili",111},
        {"swedish",112},
        {"tajik",113},
        {"tamil",114},
        {"tatar",115},
        {"telugu",116},
        {"thai",117},
        {"tigrinya",118},
        {"tsonga",119},
        {"turkish",120},
        {"turkmen",121},
        {"twi",122},
        {"ukrainian",123},
        {"urdu",124},
        {"uyghur",125},
        {"uzbek",126},
        {"vietnamese",127},
        {"welsh",128},
        {"xhosa",129},
        {"yiddish",130},
        {"yoruba",131},
        {"zulu",132},
        {"defaultnumberofiterations",133},
        {"includenontext",134}
    };
    

    bool active_languages[133] = {
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true,
        true
    };

    inline bool isLanguageActive(int index) {
        return active_languages[index-1];
    }

    int defaultLanguage = google::languages::English;

    int defaultNumIterations = 5;

    bool includeNonText = false;

    std::string path;

    public:

        inline bool &getActiveLanguage(int i) {return active_languages[i];}

        void read(const std::string &path);
        ~preferences() {
            file::write(encode(), path);
        }
        std::string encode();

        inline bool GetIncludeNonText() {
            return includeNonText;
        }

        inline int GetDefaultLanguage() {
            return defaultLanguage;
        }

        inline int GetDefaultNumIterations() {
            return defaultNumIterations;
        }

        inline void SetData(bool includeNonText, int defaultLanguage, int defaultNumIterations) {
            this->includeNonText = includeNonText;
            this->defaultLanguage = defaultLanguage;
            this->defaultNumIterations = defaultNumIterations;
        }

        bool noActiveLanguages();

        void decode(const std::string &input);
} pref;